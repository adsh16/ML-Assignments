Introduction Section B (Scratch Implementation)
You are tasked with implementing the KMeans clustering algorithm from scratch using
Python. Use the Euclidean distance as the distance function where k is chosen as 2. The
initial centroids for the 2 clusters are given as:
u1 = (3.0, 3.0)
u2 = (2.0, 2.0)

We have these points in matrix X 
5.1 3.5
4.9 3.0
5.8 2.7
6.0 3.0
6.7 3.1
4.5 2.3
6.1 2.8
5.2 3.2
5.5 2.6
5.0 2.0
8.0 0.5
7.5 0.8
8.1 −0.1
2.5 3.5
1.0 3.0
4.5 −1.0
3.0 −0.5
5.1 −0.2
6.0 −1.5
3.5 −0.1
4.0 0.0
6.1 0.5
5.4 −0.5
5.3 0.3
5.8 0.6

(a) Implement the k-means clustering algorithm from scratch. Ensure that your im-
    plementation includes:
    (a) (1 point) Initialization: Use the given centroids as starting points.
    (b) (2 points) Assignment: Assign each data point to the nearest centroid based
        on the Euclidean distance.
    (c) (2 points) Update: Recalculate the centroids after each assignment by comput-
        ing the mean of all points assigned to each centroid.
    (d) (1 point) Convergence Check: Terminate the algorithm if centroids do not
        significantly change between iterations or after a maximum of 100 iterations.
        Use a convergence threshold of 1e-4.
(b) (2 points) Find the values of final centroids after the algorithm converges. Plot the
    two clusters at the start of the process and at the end.
(c) (2 points) Compare the results using the provided initial centroids versus using
    random initialization of centroids.
(d) (5 points) Determine the optimal number of clusters, M, using the Elbow method.
    Plot the Within-Cluster Sum of Squares (WCSS) against different values of k to
    find the elbow point. Randomly initialize M centroids, perform clustering and plot
    the resulting clusters